/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiAddUserDeptAssocRequest } from '../model';
// @ts-ignore
import type { ApiAddUserDeptAssocResponse } from '../model';
// @ts-ignore
import type { ApiAddUserDeptRequest } from '../model';
// @ts-ignore
import type { ApiAddUserDeptResponse } from '../model';
// @ts-ignore
import type { ApiAddUserJobRequest } from '../model';
// @ts-ignore
import type { ApiAddUserJobResponse } from '../model';
// @ts-ignore
import type { ApiAddUserRequest } from '../model';
// @ts-ignore
import type { ApiAddUserResponse } from '../model';
// @ts-ignore
import type { ApiGetUserDeptAssocListResponse } from '../model';
// @ts-ignore
import type { ApiGetUserDeptListResponse } from '../model';
// @ts-ignore
import type { ApiGetUserJobListResponse } from '../model';
// @ts-ignore
import type { ApiGetUserListResponse } from '../model';
/**
 * UserCURDApi - axios parameter creator
 * @export
 */
export const UserCURDApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * --------------------------------------------------  tbl : user
         * @param {ApiAddUserRequest} apiAddUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDAddUser: async (apiAddUserRequest: ApiAddUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAddUserRequest' is not null or undefined
            assertParamExists('userCURDAddUser', 'apiAddUserRequest', apiAddUserRequest)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAddUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * --------------------------------------------------  tbl : user_dept
         * @param {ApiAddUserDeptRequest} apiAddUserDeptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDAddUserDept: async (apiAddUserDeptRequest: ApiAddUserDeptRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAddUserDeptRequest' is not null or undefined
            assertParamExists('userCURDAddUserDept', 'apiAddUserDeptRequest', apiAddUserDeptRequest)
            const localVarPath = `/user-dept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAddUserDeptRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * --------------------------------------------------  tbl : user_dept_assoc
         * @param {ApiAddUserDeptAssocRequest} apiAddUserDeptAssocRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDAddUserDeptAssoc: async (apiAddUserDeptAssocRequest: ApiAddUserDeptAssocRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAddUserDeptAssocRequest' is not null or undefined
            assertParamExists('userCURDAddUserDeptAssoc', 'apiAddUserDeptAssocRequest', apiAddUserDeptAssocRequest)
            const localVarPath = `/user-dept-assoc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAddUserDeptAssocRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * --------------------------------------------------  tbl : user_job
         * @param {ApiAddUserJobRequest} apiAddUserJobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDAddUserJob: async (apiAddUserJobRequest: ApiAddUserJobRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAddUserJobRequest' is not null or undefined
            assertParamExists('userCURDAddUserJob', 'apiAddUserJobRequest', apiAddUserJobRequest)
            const localVarPath = `/user-job`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAddUserJobRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDDelUserByIDList: async (iDList?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iDList) {
                localVarQueryParameter['iDList'] = iDList;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDDelUserDeptByIDList: async (iDList?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-dept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iDList) {
                localVarQueryParameter['iDList'] = iDList;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDDelUserJobByIDList: async (iDList?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-job`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iDList) {
                localVarQueryParameter['iDList'] = iDList;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDGetUserDeptAssocList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-dept-assoc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDGetUserDeptList: async (iDList?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-dept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iDList) {
                localVarQueryParameter['iDList'] = iDList;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDGetUserJobList: async (iDList?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-job`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iDList) {
                localVarQueryParameter['iDList'] = iDList;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDGetUserList: async (iDList?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iDList) {
                localVarQueryParameter['iDList'] = iDList;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserCURDApi - functional programming interface
 * @export
 */
export const UserCURDApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserCURDApiAxiosParamCreator(configuration)
    return {
        /**
         * --------------------------------------------------  tbl : user
         * @param {ApiAddUserRequest} apiAddUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCURDAddUser(apiAddUserRequest: ApiAddUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAddUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCURDAddUser(apiAddUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCURDApi.userCURDAddUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * --------------------------------------------------  tbl : user_dept
         * @param {ApiAddUserDeptRequest} apiAddUserDeptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCURDAddUserDept(apiAddUserDeptRequest: ApiAddUserDeptRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAddUserDeptResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCURDAddUserDept(apiAddUserDeptRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCURDApi.userCURDAddUserDept']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * --------------------------------------------------  tbl : user_dept_assoc
         * @param {ApiAddUserDeptAssocRequest} apiAddUserDeptAssocRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCURDAddUserDeptAssoc(apiAddUserDeptAssocRequest: ApiAddUserDeptAssocRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAddUserDeptAssocResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCURDAddUserDeptAssoc(apiAddUserDeptAssocRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCURDApi.userCURDAddUserDeptAssoc']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * --------------------------------------------------  tbl : user_job
         * @param {ApiAddUserJobRequest} apiAddUserJobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCURDAddUserJob(apiAddUserJobRequest: ApiAddUserJobRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAddUserJobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCURDAddUserJob(apiAddUserJobRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCURDApi.userCURDAddUserJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCURDDelUserByIDList(iDList?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCURDDelUserByIDList(iDList, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCURDApi.userCURDDelUserByIDList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCURDDelUserDeptByIDList(iDList?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCURDDelUserDeptByIDList(iDList, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCURDApi.userCURDDelUserDeptByIDList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCURDDelUserJobByIDList(iDList?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCURDDelUserJobByIDList(iDList, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCURDApi.userCURDDelUserJobByIDList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCURDGetUserDeptAssocList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiGetUserDeptAssocListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCURDGetUserDeptAssocList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCURDApi.userCURDGetUserDeptAssocList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCURDGetUserDeptList(iDList?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiGetUserDeptListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCURDGetUserDeptList(iDList, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCURDApi.userCURDGetUserDeptList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCURDGetUserJobList(iDList?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiGetUserJobListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCURDGetUserJobList(iDList, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCURDApi.userCURDGetUserJobList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCURDGetUserList(iDList?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiGetUserListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCURDGetUserList(iDList, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserCURDApi.userCURDGetUserList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserCURDApi - factory interface
 * @export
 */
export const UserCURDApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserCURDApiFp(configuration)
    return {
        /**
         * --------------------------------------------------  tbl : user
         * @param {ApiAddUserRequest} apiAddUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDAddUser(apiAddUserRequest: ApiAddUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAddUserResponse> {
            return localVarFp.userCURDAddUser(apiAddUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * --------------------------------------------------  tbl : user_dept
         * @param {ApiAddUserDeptRequest} apiAddUserDeptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDAddUserDept(apiAddUserDeptRequest: ApiAddUserDeptRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAddUserDeptResponse> {
            return localVarFp.userCURDAddUserDept(apiAddUserDeptRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * --------------------------------------------------  tbl : user_dept_assoc
         * @param {ApiAddUserDeptAssocRequest} apiAddUserDeptAssocRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDAddUserDeptAssoc(apiAddUserDeptAssocRequest: ApiAddUserDeptAssocRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAddUserDeptAssocResponse> {
            return localVarFp.userCURDAddUserDeptAssoc(apiAddUserDeptAssocRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * --------------------------------------------------  tbl : user_job
         * @param {ApiAddUserJobRequest} apiAddUserJobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDAddUserJob(apiAddUserJobRequest: ApiAddUserJobRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAddUserJobResponse> {
            return localVarFp.userCURDAddUserJob(apiAddUserJobRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDDelUserByIDList(iDList?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.userCURDDelUserByIDList(iDList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDDelUserDeptByIDList(iDList?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.userCURDDelUserDeptByIDList(iDList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDDelUserJobByIDList(iDList?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.userCURDDelUserJobByIDList(iDList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDGetUserDeptAssocList(options?: RawAxiosRequestConfig): AxiosPromise<ApiGetUserDeptAssocListResponse> {
            return localVarFp.userCURDGetUserDeptAssocList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDGetUserDeptList(iDList?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<ApiGetUserDeptListResponse> {
            return localVarFp.userCURDGetUserDeptList(iDList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDGetUserJobList(iDList?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<ApiGetUserJobListResponse> {
            return localVarFp.userCURDGetUserJobList(iDList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCURDGetUserList(iDList?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<ApiGetUserListResponse> {
            return localVarFp.userCURDGetUserList(iDList, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserCURDApi - object-oriented interface
 * @export
 * @class UserCURDApi
 * @extends {BaseAPI}
 */
export class UserCURDApi extends BaseAPI {
    /**
     * --------------------------------------------------  tbl : user
     * @param {ApiAddUserRequest} apiAddUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCURDApi
     */
    public userCURDAddUser(apiAddUserRequest: ApiAddUserRequest, options?: RawAxiosRequestConfig) {
        return UserCURDApiFp(this.configuration).userCURDAddUser(apiAddUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * --------------------------------------------------  tbl : user_dept
     * @param {ApiAddUserDeptRequest} apiAddUserDeptRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCURDApi
     */
    public userCURDAddUserDept(apiAddUserDeptRequest: ApiAddUserDeptRequest, options?: RawAxiosRequestConfig) {
        return UserCURDApiFp(this.configuration).userCURDAddUserDept(apiAddUserDeptRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * --------------------------------------------------  tbl : user_dept_assoc
     * @param {ApiAddUserDeptAssocRequest} apiAddUserDeptAssocRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCURDApi
     */
    public userCURDAddUserDeptAssoc(apiAddUserDeptAssocRequest: ApiAddUserDeptAssocRequest, options?: RawAxiosRequestConfig) {
        return UserCURDApiFp(this.configuration).userCURDAddUserDeptAssoc(apiAddUserDeptAssocRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * --------------------------------------------------  tbl : user_job
     * @param {ApiAddUserJobRequest} apiAddUserJobRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCURDApi
     */
    public userCURDAddUserJob(apiAddUserJobRequest: ApiAddUserJobRequest, options?: RawAxiosRequestConfig) {
        return UserCURDApiFp(this.configuration).userCURDAddUserJob(apiAddUserJobRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<number>} [iDList] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCURDApi
     */
    public userCURDDelUserByIDList(iDList?: Array<number>, options?: RawAxiosRequestConfig) {
        return UserCURDApiFp(this.configuration).userCURDDelUserByIDList(iDList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<number>} [iDList] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCURDApi
     */
    public userCURDDelUserDeptByIDList(iDList?: Array<number>, options?: RawAxiosRequestConfig) {
        return UserCURDApiFp(this.configuration).userCURDDelUserDeptByIDList(iDList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<number>} [iDList] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCURDApi
     */
    public userCURDDelUserJobByIDList(iDList?: Array<number>, options?: RawAxiosRequestConfig) {
        return UserCURDApiFp(this.configuration).userCURDDelUserJobByIDList(iDList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCURDApi
     */
    public userCURDGetUserDeptAssocList(options?: RawAxiosRequestConfig) {
        return UserCURDApiFp(this.configuration).userCURDGetUserDeptAssocList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<number>} [iDList] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCURDApi
     */
    public userCURDGetUserDeptList(iDList?: Array<number>, options?: RawAxiosRequestConfig) {
        return UserCURDApiFp(this.configuration).userCURDGetUserDeptList(iDList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<number>} [iDList] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCURDApi
     */
    public userCURDGetUserJobList(iDList?: Array<number>, options?: RawAxiosRequestConfig) {
        return UserCURDApiFp(this.configuration).userCURDGetUserJobList(iDList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<number>} [iDList] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCURDApi
     */
    public userCURDGetUserList(iDList?: Array<number>, options?: RawAxiosRequestConfig) {
        return UserCURDApiFp(this.configuration).userCURDGetUserList(iDList, options).then((request) => request(this.axios, this.basePath));
    }
}

