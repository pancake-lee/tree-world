/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiAddAbandonCodeRequest } from '../model';
// @ts-ignore
import type { ApiAddAbandonCodeResponse } from '../model';
// @ts-ignore
import type { ApiGetAbandonCodeListResponse } from '../model';
// @ts-ignore
import type { ApiUpdateAbandonCodeRequest } from '../model';
// @ts-ignore
import type { ApiUpdateAbandonCodeResponse } from '../model';
/**
 * AbandonCodeCURDApi - axios parameter creator
 * @export
 */
export const AbandonCodeCURDApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * MARK REPEAT API START 一个表的接口定义  --------------------------------------------------  tbl : abandon_code
         * @param {ApiAddAbandonCodeRequest} apiAddAbandonCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abandonCodeCURDAddAbandonCode: async (apiAddAbandonCodeRequest: ApiAddAbandonCodeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAddAbandonCodeRequest' is not null or undefined
            assertParamExists('abandonCodeCURDAddAbandonCode', 'apiAddAbandonCodeRequest', apiAddAbandonCodeRequest)
            const localVarPath = `/abandon-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAddAbandonCodeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [idx1List] MARK REPLACE REQUEST IDX START 替换内容，索引字段
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abandonCodeCURDDelAbandonCodeByIdx1List: async (idx1List?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/abandon-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idx1List) {
                localVarQueryParameter['idx1List'] = idx1List;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [idx1List] MARK REPLACE REQUEST IDX START 替换内容，索引字段
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abandonCodeCURDGetAbandonCodeList: async (idx1List?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/abandon-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idx1List) {
                localVarQueryParameter['idx1List'] = idx1List;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * MARK REMOVE IF NO PRIMARY KEY START
         * @param {ApiUpdateAbandonCodeRequest} apiUpdateAbandonCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abandonCodeCURDUpdateAbandonCode: async (apiUpdateAbandonCodeRequest: ApiUpdateAbandonCodeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiUpdateAbandonCodeRequest' is not null or undefined
            assertParamExists('abandonCodeCURDUpdateAbandonCode', 'apiUpdateAbandonCodeRequest', apiUpdateAbandonCodeRequest)
            const localVarPath = `/abandon-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiUpdateAbandonCodeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AbandonCodeCURDApi - functional programming interface
 * @export
 */
export const AbandonCodeCURDApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AbandonCodeCURDApiAxiosParamCreator(configuration)
    return {
        /**
         * MARK REPEAT API START 一个表的接口定义  --------------------------------------------------  tbl : abandon_code
         * @param {ApiAddAbandonCodeRequest} apiAddAbandonCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abandonCodeCURDAddAbandonCode(apiAddAbandonCodeRequest: ApiAddAbandonCodeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAddAbandonCodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.abandonCodeCURDAddAbandonCode(apiAddAbandonCodeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AbandonCodeCURDApi.abandonCodeCURDAddAbandonCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<number>} [idx1List] MARK REPLACE REQUEST IDX START 替换内容，索引字段
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abandonCodeCURDDelAbandonCodeByIdx1List(idx1List?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.abandonCodeCURDDelAbandonCodeByIdx1List(idx1List, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AbandonCodeCURDApi.abandonCodeCURDDelAbandonCodeByIdx1List']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<number>} [idx1List] MARK REPLACE REQUEST IDX START 替换内容，索引字段
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abandonCodeCURDGetAbandonCodeList(idx1List?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiGetAbandonCodeListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.abandonCodeCURDGetAbandonCodeList(idx1List, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AbandonCodeCURDApi.abandonCodeCURDGetAbandonCodeList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * MARK REMOVE IF NO PRIMARY KEY START
         * @param {ApiUpdateAbandonCodeRequest} apiUpdateAbandonCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abandonCodeCURDUpdateAbandonCode(apiUpdateAbandonCodeRequest: ApiUpdateAbandonCodeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUpdateAbandonCodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.abandonCodeCURDUpdateAbandonCode(apiUpdateAbandonCodeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AbandonCodeCURDApi.abandonCodeCURDUpdateAbandonCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AbandonCodeCURDApi - factory interface
 * @export
 */
export const AbandonCodeCURDApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AbandonCodeCURDApiFp(configuration)
    return {
        /**
         * MARK REPEAT API START 一个表的接口定义  --------------------------------------------------  tbl : abandon_code
         * @param {ApiAddAbandonCodeRequest} apiAddAbandonCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abandonCodeCURDAddAbandonCode(apiAddAbandonCodeRequest: ApiAddAbandonCodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAddAbandonCodeResponse> {
            return localVarFp.abandonCodeCURDAddAbandonCode(apiAddAbandonCodeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<number>} [idx1List] MARK REPLACE REQUEST IDX START 替换内容，索引字段
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abandonCodeCURDDelAbandonCodeByIdx1List(idx1List?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.abandonCodeCURDDelAbandonCodeByIdx1List(idx1List, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<number>} [idx1List] MARK REPLACE REQUEST IDX START 替换内容，索引字段
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abandonCodeCURDGetAbandonCodeList(idx1List?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<ApiGetAbandonCodeListResponse> {
            return localVarFp.abandonCodeCURDGetAbandonCodeList(idx1List, options).then((request) => request(axios, basePath));
        },
        /**
         * MARK REMOVE IF NO PRIMARY KEY START
         * @param {ApiUpdateAbandonCodeRequest} apiUpdateAbandonCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abandonCodeCURDUpdateAbandonCode(apiUpdateAbandonCodeRequest: ApiUpdateAbandonCodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiUpdateAbandonCodeResponse> {
            return localVarFp.abandonCodeCURDUpdateAbandonCode(apiUpdateAbandonCodeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AbandonCodeCURDApi - object-oriented interface
 * @export
 * @class AbandonCodeCURDApi
 * @extends {BaseAPI}
 */
export class AbandonCodeCURDApi extends BaseAPI {
    /**
     * MARK REPEAT API START 一个表的接口定义  --------------------------------------------------  tbl : abandon_code
     * @param {ApiAddAbandonCodeRequest} apiAddAbandonCodeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbandonCodeCURDApi
     */
    public abandonCodeCURDAddAbandonCode(apiAddAbandonCodeRequest: ApiAddAbandonCodeRequest, options?: RawAxiosRequestConfig) {
        return AbandonCodeCURDApiFp(this.configuration).abandonCodeCURDAddAbandonCode(apiAddAbandonCodeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<number>} [idx1List] MARK REPLACE REQUEST IDX START 替换内容，索引字段
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbandonCodeCURDApi
     */
    public abandonCodeCURDDelAbandonCodeByIdx1List(idx1List?: Array<number>, options?: RawAxiosRequestConfig) {
        return AbandonCodeCURDApiFp(this.configuration).abandonCodeCURDDelAbandonCodeByIdx1List(idx1List, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<number>} [idx1List] MARK REPLACE REQUEST IDX START 替换内容，索引字段
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbandonCodeCURDApi
     */
    public abandonCodeCURDGetAbandonCodeList(idx1List?: Array<number>, options?: RawAxiosRequestConfig) {
        return AbandonCodeCURDApiFp(this.configuration).abandonCodeCURDGetAbandonCodeList(idx1List, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * MARK REMOVE IF NO PRIMARY KEY START
     * @param {ApiUpdateAbandonCodeRequest} apiUpdateAbandonCodeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbandonCodeCURDApi
     */
    public abandonCodeCURDUpdateAbandonCode(apiUpdateAbandonCodeRequest: ApiUpdateAbandonCodeRequest, options?: RawAxiosRequestConfig) {
        return AbandonCodeCURDApiFp(this.configuration).abandonCodeCURDUpdateAbandonCode(apiUpdateAbandonCodeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

