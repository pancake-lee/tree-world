/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiAddCourseSwapRequestRequest } from '../model';
// @ts-ignore
import type { ApiAddCourseSwapRequestResponse } from '../model';
// @ts-ignore
import type { ApiGetCourseSwapRequestListResponse } from '../model';
// @ts-ignore
import type { ApiUpdateCourseSwapRequestRequest } from '../model';
// @ts-ignore
import type { ApiUpdateCourseSwapRequestResponse } from '../model';
/**
 * SchoolCURDApi - axios parameter creator
 * @export
 */
export const SchoolCURDApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * --------------------------------------------------  tbl : course_swap_request
         * @param {ApiAddCourseSwapRequestRequest} apiAddCourseSwapRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolCURDAddCourseSwapRequest: async (apiAddCourseSwapRequestRequest: ApiAddCourseSwapRequestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAddCourseSwapRequestRequest' is not null or undefined
            assertParamExists('schoolCURDAddCourseSwapRequest', 'apiAddCourseSwapRequestRequest', apiAddCourseSwapRequestRequest)
            const localVarPath = `/course-swap-request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAddCourseSwapRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolCURDDelCourseSwapRequestByIDList: async (iDList?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/course-swap-request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iDList) {
                localVarQueryParameter['iDList'] = iDList;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolCURDGetCourseSwapRequestList: async (iDList?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/course-swap-request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (iDList) {
                localVarQueryParameter['iDList'] = iDList;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiUpdateCourseSwapRequestRequest} apiUpdateCourseSwapRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolCURDUpdateCourseSwapRequest: async (apiUpdateCourseSwapRequestRequest: ApiUpdateCourseSwapRequestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiUpdateCourseSwapRequestRequest' is not null or undefined
            assertParamExists('schoolCURDUpdateCourseSwapRequest', 'apiUpdateCourseSwapRequestRequest', apiUpdateCourseSwapRequestRequest)
            const localVarPath = `/course-swap-request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiUpdateCourseSwapRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchoolCURDApi - functional programming interface
 * @export
 */
export const SchoolCURDApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchoolCURDApiAxiosParamCreator(configuration)
    return {
        /**
         * --------------------------------------------------  tbl : course_swap_request
         * @param {ApiAddCourseSwapRequestRequest} apiAddCourseSwapRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schoolCURDAddCourseSwapRequest(apiAddCourseSwapRequestRequest: ApiAddCourseSwapRequestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAddCourseSwapRequestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schoolCURDAddCourseSwapRequest(apiAddCourseSwapRequestRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SchoolCURDApi.schoolCURDAddCourseSwapRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schoolCURDDelCourseSwapRequestByIDList(iDList?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schoolCURDDelCourseSwapRequestByIDList(iDList, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SchoolCURDApi.schoolCURDDelCourseSwapRequestByIDList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schoolCURDGetCourseSwapRequestList(iDList?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiGetCourseSwapRequestListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schoolCURDGetCourseSwapRequestList(iDList, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SchoolCURDApi.schoolCURDGetCourseSwapRequestList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiUpdateCourseSwapRequestRequest} apiUpdateCourseSwapRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schoolCURDUpdateCourseSwapRequest(apiUpdateCourseSwapRequestRequest: ApiUpdateCourseSwapRequestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUpdateCourseSwapRequestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schoolCURDUpdateCourseSwapRequest(apiUpdateCourseSwapRequestRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SchoolCURDApi.schoolCURDUpdateCourseSwapRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SchoolCURDApi - factory interface
 * @export
 */
export const SchoolCURDApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchoolCURDApiFp(configuration)
    return {
        /**
         * --------------------------------------------------  tbl : course_swap_request
         * @param {ApiAddCourseSwapRequestRequest} apiAddCourseSwapRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolCURDAddCourseSwapRequest(apiAddCourseSwapRequestRequest: ApiAddCourseSwapRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAddCourseSwapRequestResponse> {
            return localVarFp.schoolCURDAddCourseSwapRequest(apiAddCourseSwapRequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolCURDDelCourseSwapRequestByIDList(iDList?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.schoolCURDDelCourseSwapRequestByIDList(iDList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<number>} [iDList] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolCURDGetCourseSwapRequestList(iDList?: Array<number>, options?: RawAxiosRequestConfig): AxiosPromise<ApiGetCourseSwapRequestListResponse> {
            return localVarFp.schoolCURDGetCourseSwapRequestList(iDList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiUpdateCourseSwapRequestRequest} apiUpdateCourseSwapRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schoolCURDUpdateCourseSwapRequest(apiUpdateCourseSwapRequestRequest: ApiUpdateCourseSwapRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiUpdateCourseSwapRequestResponse> {
            return localVarFp.schoolCURDUpdateCourseSwapRequest(apiUpdateCourseSwapRequestRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchoolCURDApi - object-oriented interface
 * @export
 * @class SchoolCURDApi
 * @extends {BaseAPI}
 */
export class SchoolCURDApi extends BaseAPI {
    /**
     * --------------------------------------------------  tbl : course_swap_request
     * @param {ApiAddCourseSwapRequestRequest} apiAddCourseSwapRequestRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolCURDApi
     */
    public schoolCURDAddCourseSwapRequest(apiAddCourseSwapRequestRequest: ApiAddCourseSwapRequestRequest, options?: RawAxiosRequestConfig) {
        return SchoolCURDApiFp(this.configuration).schoolCURDAddCourseSwapRequest(apiAddCourseSwapRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<number>} [iDList] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolCURDApi
     */
    public schoolCURDDelCourseSwapRequestByIDList(iDList?: Array<number>, options?: RawAxiosRequestConfig) {
        return SchoolCURDApiFp(this.configuration).schoolCURDDelCourseSwapRequestByIDList(iDList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<number>} [iDList] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolCURDApi
     */
    public schoolCURDGetCourseSwapRequestList(iDList?: Array<number>, options?: RawAxiosRequestConfig) {
        return SchoolCURDApiFp(this.configuration).schoolCURDGetCourseSwapRequestList(iDList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiUpdateCourseSwapRequestRequest} apiUpdateCourseSwapRequestRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolCURDApi
     */
    public schoolCURDUpdateCourseSwapRequest(apiUpdateCourseSwapRequestRequest: ApiUpdateCourseSwapRequestRequest, options?: RawAxiosRequestConfig) {
        return SchoolCURDApiFp(this.configuration).schoolCURDUpdateCourseSwapRequest(apiUpdateCourseSwapRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

