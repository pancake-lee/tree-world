/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiEditUserNameRequest } from '../model';
// @ts-ignore
import type { ApiLoginRequest } from '../model';
// @ts-ignore
import type { ApiLoginResponse } from '../model';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 从部门中移除用户
         * @param {number} [userID] 
         * @param {number} [deptID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDelUserDeptAssoc: async (userID?: number, deptID?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-dept-assoc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userID !== undefined) {
                localVarQueryParameter['userID'] = userID;
            }

            if (deptID !== undefined) {
                localVarQueryParameter['deptID'] = deptID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 修改用户名
         * @param {ApiEditUserNameRequest} apiEditUserNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userEditUserName: async (apiEditUserNameRequest: ApiEditUserNameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiEditUserNameRequest' is not null or undefined
            assertParamExists('userEditUserName', 'apiEditUserNameRequest', apiEditUserNameRequest)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiEditUserNameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 登录或注册，其实可以理解为只是通过用户账号密码新建一个token，用于其他接口鉴权
         * @param {ApiLoginRequest} apiLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin: async (apiLoginRequest: ApiLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiLoginRequest' is not null or undefined
            assertParamExists('userLogin', 'apiLoginRequest', apiLoginRequest)
            const localVarPath = `/user/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 从部门中移除用户
         * @param {number} [userID] 
         * @param {number} [deptID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userDelUserDeptAssoc(userID?: number, deptID?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userDelUserDeptAssoc(userID, deptID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userDelUserDeptAssoc']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 修改用户名
         * @param {ApiEditUserNameRequest} apiEditUserNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userEditUserName(apiEditUserNameRequest: ApiEditUserNameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userEditUserName(apiEditUserNameRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userEditUserName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 登录或注册，其实可以理解为只是通过用户账号密码新建一个token，用于其他接口鉴权
         * @param {ApiLoginRequest} apiLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLogin(apiLoginRequest: ApiLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLogin(apiLoginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 从部门中移除用户
         * @param {number} [userID] 
         * @param {number} [deptID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDelUserDeptAssoc(userID?: number, deptID?: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.userDelUserDeptAssoc(userID, deptID, options).then((request) => request(axios, basePath));
        },
        /**
         * 修改用户名
         * @param {ApiEditUserNameRequest} apiEditUserNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userEditUserName(apiEditUserNameRequest: ApiEditUserNameRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.userEditUserName(apiEditUserNameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 登录或注册，其实可以理解为只是通过用户账号密码新建一个token，用于其他接口鉴权
         * @param {ApiLoginRequest} apiLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin(apiLoginRequest: ApiLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiLoginResponse> {
            return localVarFp.userLogin(apiLoginRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 从部门中移除用户
     * @param {number} [userID] 
     * @param {number} [deptID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userDelUserDeptAssoc(userID?: number, deptID?: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userDelUserDeptAssoc(userID, deptID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 修改用户名
     * @param {ApiEditUserNameRequest} apiEditUserNameRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userEditUserName(apiEditUserNameRequest: ApiEditUserNameRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userEditUserName(apiEditUserNameRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 登录或注册，其实可以理解为只是通过用户账号密码新建一个token，用于其他接口鉴权
     * @param {ApiLoginRequest} apiLoginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userLogin(apiLoginRequest: ApiLoginRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userLogin(apiLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

